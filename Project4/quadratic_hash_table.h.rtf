{\rtf1\ansi\ansicpg1252\cocoartf1343\cocoasubrtf160
{\fonttbl\f0\fswiss\fcharset0 Helvetica;}
{\colortbl;\red255\green255\blue255;}
\paperw11900\paperh16840\margl1440\margr1440\vieww10800\viewh8400\viewkind0
\pard\tx566\tx1133\tx1700\tx2267\tx2834\tx3401\tx3968\tx4535\tx5102\tx5669\tx6236\tx6803\pardirnatural

\f0\fs24 \cf0 /*****************************************\
 * Instructions\
 *  - Replace 'uwuserid' with your uWaterloo User ID\
 *  - Select the current calendar term and enter the year\
 *  - List students with whom you had discussions and who helped you\
 *\
 * uWaterloo User ID:  ohenriet @uwaterloo.ca\
 * Submitted for ECE 250\
 * Department of Electrical and Computer Engineering\
 * University of Waterloo\
 * Calender Term of Submission:  (Winter) 2015\
 *\
 * By submitting this file, I affirm that\
 * I am the author of all modifications to\
 * the provided code.\
 *\
 * The following is a list of uWaterloo User IDs of those students\
 * I had discussions with in preparing this project:\
 *    -\
 *\
 * The following is a list of uWaterloo User IDs of those students\
 * who helped me with this project (describe their help; e.g., debugging):\
 *    -\
 *****************************************/\
\
#ifndef DOUBLE_HASH_TABLE_H\
#define DOUBLE_HASH_TABLE_H\
\
#ifndef nullptr\
#define nullptr 0\
#endif\
\
#include "Exception.h"\
#include "ece250.h"\
\
enum bin_state_t \{ UNOCCUPIED, OCCUPIED, ERASED \};\
\
template <typename Type>\
class Quadratic_hash_table \{\
	private:\
		int count;\
		int power;\
		int array_size;\
		int mask;\
		int erased;\
		Type *array;\
		bin_state_t *occupied;\
\
		int hash( Type const & ) const;\
\
	public:\
		Quadratic_hash_table( int = 5 );\
		~Quadratic_hash_table();\
		int size() const;\
		int capacity() const;\
		double load_factor() const;\
		bool empty() const;\
		bool member( Type const & ) const;\
		Type bin( int ) const;\
       \
		void print() const;\
\
		void insert( Type const & );\
		bool erase( Type const & );\
		void clear();\
\
	// Friends\
\
	template <typename T>\
	friend std::ostream &operator<<( std::ostream &, Quadratic_hash_table<T> const & );\
\};\
\
template <typename Type>\
Quadratic_hash_table<Type>::Quadratic_hash_table( int m ):\
count( 0 ), power( m ),\
array_size( 1 << power ),\
mask( array_size - 1 ),\
array( new Type[array_size] ),\
occupied( new bin_state_t[array_size] ) \{\
\
	for ( int i = 0; i < array_size; ++i ) \{\
		occupied[i] = UNOCCUPIED;\
	\}\
\}\
\
// Your implementation here\
\
template <typename Type>\
Quadratic_hash_table<Type>::~Quadratic_hash_table()\{\
    delete [] array;\
\}\
\
template <typename Type>\
int Quadratic_hash_table<Type>::size() const\{\
 return count;\
\}\
\
template <typename Type>\
int Quadratic_hash_table<Type>:: capacity() const\{\
	return array_size;\
\
\}\
\
template <typename Type>\
double Quadratic_hash_table <Type>:: load_factor() const\{\
   \
  double load_factor= static_cast<double>(count+erased)/static_cast<double>(array_size);\
  return load_factor;\
\
\}\
template <typename Type>\
bool Quadratic_hash_table<Type>:: empty() const\{\
\
    return count==0;\
\}\
template <typename Type>\
bool Quadratic_hash_table<Type>::member(Type const &obj) const\{\
   	\
    int bin=static_cast<int>(obj) % capacity();\
\
   for(int i=0; i<array_size; ++i)\
   \{\
      bin=(bin+i)%capacity();\
      if(array[bin]==obj)\
      \{\
      	return true;\
      \}\
\
      if(occupied[bin]!=OCCUPIED)\
      \{\
      	return false;\
      \}\
\
   \}\
   return false;\
\
\}\
\
\
template <typename Type>\
Type Quadratic_hash_table<Type>:: bin(int n)const\{\
\
  return array[n];\
\
\}\
template <typename Type>\
void Quadratic_hash_table<Type>:: print() const\{\
\
\}\
template <typename Type>\
void Quadratic_hash_table<Type>:: insert(Type const &obj)\{\
\
 if(capacity()==size())\
  \{\
  	throw overflow();\
  \}\
\
   \
  int bin=static_cast<int>(obj)% capacity();;\
\
   for(int i=0; i<array_size; ++i)\
   \{\
      bin= (bin+i) %capacity();\
\
      if(occupied[bin]!= OCCUPIED)\
      \{\
         array[bin]=obj;\
         occupied[bin]=OCCUPIED;\
         ++count;\
      \}\
      if(array[bin]==obj)\
      	\{\
      		return;\
      	\}\
\
   \}\
\}\
\
template <typename Type>\
bool Quadratic_hash_table<Type>:: erase(Type const &obj)\{\
  \
  \
  int bin=static_cast<int>(obj) % capacity();;\
\
   for(int i=0; i<array_size; ++i)\
   \{\
      bin=(bin+ i)%capacity();\
      if(array[bin]==obj)\
      \{\
         occupied[bin]=ERASED;\
         --count;\
         ++erased;\
         return true;\
      \}\
      if(occupied[bin]!=OCCUPIED)\
      \{\
\
      	return false;\
      \}\
   \}\
      \
\}\
template <typename Type>\
void Quadratic_hash_table<Type>:: clear()\{\
	for ( int i = 0; i < array_size; ++i ) \{\
		occupied[i] = UNOCCUPIED;\
	\}\
	count=0;\
\
\}\
\
\
template <typename T>\
std::ostream &operator<<( std::ostream &out, Quadratic_hash_table<T> const &hash ) \{\
	for ( int i = 0; i < hash.capacity(); ++i ) \{\
		if ( hash.occupied[i] == UNOCCUPIED ) \{\
			out << "- ";\
		\} else if ( hash.occupied[i] == ERASED ) \{\
			out << "x ";\
		\} else \{\
			out << hash.array[i] << ' ';\
		\}\
	\}\
\
	return out;\
\}\
\
\
\
#endif}