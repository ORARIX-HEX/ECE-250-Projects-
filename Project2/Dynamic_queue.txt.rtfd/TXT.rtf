{\rtf1\ansi\ansicpg1252\cocoartf1343\cocoasubrtf160
{\fonttbl\f0\fswiss\fcharset0 Helvetica;}
{\colortbl;\red255\green255\blue255;}
\paperw11900\paperh16840\margl1440\margr1440\vieww10800\viewh8400\viewkind0
\pard\tx566\tx1133\tx1700\tx2267\tx2834\tx3401\tx3968\tx4535\tx5102\tx5669\tx6236\tx6803\pardirnatural

\f0\fs24 \cf0 /*****************************************\
 * Instructions\
 *  - Replace 'uwuserid' with your uWaterloo User ID\
 *  - Select the current calendar term and enter the year\
 *  - List students with whom you had discussions and who helped you\
 *\
 * uWaterloo User ID:  ohenriet@uwaterloo.ca\
 * Submitted for ECE 250\
 * Department of Electrical and Computer Engineering\
 * University of Waterloo\
 * Calender Term of Submission:  (Winter|Spring|Fall) 201N\
 *\
 * By submitting this file, I affirm that\
 * I am the author of all modifications to\
 * the provided code.\
 *\
 * The following is a list of uWaterloo User IDs of those students\
 * I had discussions with in preparing this project:\
 *    -\
 *\
 * The following is a list of uWaterloo User IDs of those students\
 * who helped me with this project (describe their help; e.g., debugging):\
 *    -\
 *****************************************/\
\
#ifndef DYNAMIC_QUEUE_H\
#define DYNAMIC_QUEUE_H\
\
#ifndef nullptr\
#define nullptr 0\
#endif\
\
#include <algorithm>\
#include "ece250.h"\
#include "Exception.h"\
\
template <typename Type>\
class Dynamic_queue \{\
	private:\
		int initial_capacity;\
		int array_capacity;\
		Type *array;\
		int ihead;\
		int itail;\
		int entry_count;\
		// other integer member variables, as necessary\
\
	public:\
		Dynamic_queue( int = 10 );\
		Dynamic_queue( Dynamic_queue const & );\
		~Dynamic_queue();\
\
		Type head() const;\
		int size() const;\
		bool empty() const;\
		int capacity() const;\
\
		void swap( Dynamic_queue & );\
		Dynamic_queue &operator=( Dynamic_queue );\
		void enqueue( Type const & );\
		Type dequeue();\
		void clear();\
\
	// Friends\
\
	template <typename T>\
	friend std::ostream &operator<<( std::ostream &, Dynamic_queue<T> const & );\
\};\
\
template <typename Type>\
Dynamic_queue<Type>::Dynamic_queue( int n ):\
initial_capacity( std::max( n, 1 ) ),\
array_capacity( initial_capacity ),\
array( new Type[initial_capacity] ),\
ihead( 0 ),\
itail( initial_capacity - 1 ),\
entry_count( 0 ) \{\
	// Enter your implementation here.\
	if(n<=0)\
	\{\
		initial_capacity=1;\
	\}\
	else \
	\{\
	 initial_capacity=10;\
	\}\
\
\}\
\
template <typename Type>\
Dynamic_queue<Type>::Dynamic_queue( Dynamic_queue const &queue ):\
initial_capacity( queue.initial_capacity ),\
array_capacity( queue.array_capacity ),\
array( new Type[array_capacity] ),\
ihead( queue.ihead ),\
itail( queue.itail ),\
entry_count( queue.entry_count ) \{\
	// The above initializations copy the values of the appropriate\
	// member variables and allocate memory for the data structure;\
	// however, you must still copy the stored objects.\
\
	// Enter your implementation here.\
\}\
\
template <typename Type>\
Dynamic_queue<Type>::~Dynamic_queue() \{\
	// Enter your implementation here.\
	delete array;\
\
\}\
\
template <typename Type>\
int Dynamic_queue<Type>::size() const \{\
	// Enter your implementation here.\
	return entry_count;\
\
\}\
\
template <typename Type>\
int Dynamic_queue<Type>::capacity() const \{\
	// Enter your implementation here.\
	return array_capacity;\
\}\
\
template <typename Type>\
bool Dynamic_queue<Type>::empty() const \{\
	// Enter your implementation here.\
	return entry_count==0;\
\}\
\
template <typename Type>\
Type Dynamic_queue<Type>::head() const \{\
	// Enter your implementation here.\
	if (empty())\
	\{\
		throw underflow();\
	\}\
\
	return array[0];\
\}\
\
template <typename Type>\
void Dynamic_queue<Type>::swap( Dynamic_queue<Type> &queue ) \{\
	std::swap( initial_capacity, queue.initial_capacity );\
	std::swap( array_capacity, queue.array_capacity );\
	std::swap( array, queue.array );\
	std::swap( ihead, queue.ihead );\
	std::swap( itail, queue.itail );\
	std::swap( entry_count, queue.entry_count );\
\}\
\
template <typename Type>\
Dynamic_queue<Type> &Dynamic_queue<Type>::operator=( Dynamic_queue<Type> rhs ) \{\
	swap( rhs );\
	\
	return *this;\
\}\
\
template <typename Type>\
void Dynamic_queue<Type>::enqueue( Type const &obj ) \{\
	// Enter your implementation here.\
	if(size()==array_capacity)\
	\{\
		array_capacity=array_capacity*2;\
		\
\
	\}\
	\
     array[size()]=obj;\
\}\
\
template <typename Type>\
Type Dynamic_queue<Type>::dequeue() \{\
	// Enter your implementation here.\
	if(empty())\
	\{\
		throw underflow();\
	\}\
	//delete array[0];\
	Type first_value= array[0];\
	for(int i=0; i<size(); ++i)\
	\{\
		array[i]= array[i+1];\
	\}\
	\
\
	if(array_capacity==0.25*size() && array_capacity>initial_capacity)\
	\{\
		array_capacity=array_capacity/2;\
	\}\
	return first_value;\
	\
\}\
\
template <typename Type>\
void Dynamic_queue<Type>::clear() \{\
	// Enter your implementation here.\
\}\
\
// You can modify this function however you want:  it will not be tested\
\
template <typename Type>\
std::ostream &operator<<( std::ostream &out, Dynamic_queue<Type> const &queue ) \{\
	// I don't know how you are implementing your queue so I cannot print it.\
	// If you want, you can print whatever you want here and then call cout\
	// in the driver.\
\
	// Remember to redirect to out, e.g.,\
	//      out << "Hello!";\
\
	return out;\
\}\
\
// Is an error showing up in ece250.h or elsewhere?\
// Did you forget a closing '\}' ?\
\
#endif\
}